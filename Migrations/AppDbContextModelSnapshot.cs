// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Skillora.Data;

namespace Skillora.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Skillora.Models.Entities.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Skillora.Models.Entities.Job", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyViewModelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("JobLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("package")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyViewModelId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Skillora.Models.Entities.JobConstraint", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("JobId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MaxAge")
                        .HasColumnType("int");

                    b.Property<int>("MinAge")
                        .HasColumnType("int");

                    b.Property<decimal>("MinCGPA")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal>("MinPercentage10")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("MinPercentage12")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("JobId")
                        .IsUnique()
                        .HasFilter("[JobId] IS NOT NULL");

                    b.ToTable("JobConstraints");
                });

            modelBuilder.Entity("Skillora.Models.Entities.ShortListedStudentJob", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("JobId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("ShortListedStudentJob");
                });

            modelBuilder.Entity("Skillora.Models.Entities.Skill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Skillora.Models.Entities.SkillJob", b =>
                {
                    b.Property<string>("SkillId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("JobId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SkillId", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("SkillJob");
                });

            modelBuilder.Entity("Skillora.Models.Entities.SkillStudent", b =>
                {
                    b.Property<string>("SkillId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SkillId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("SkillStudent");
                });

            modelBuilder.Entity("Skillora.Models.Entities.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Cgpa")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Github")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Percentage10")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("Percentage12")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pincode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Skillora.Models.Entities.StudentJob", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("JobId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("StudentJob");
                });

            modelBuilder.Entity("Skillora.Models.ViewModels.CompanyViewModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyViewModel");
                });

            modelBuilder.Entity("Skillora.Models.ViewModels.DeleteJobViewModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("companyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeleteJobViewModel");
                });

            modelBuilder.Entity("Skillora.Models.Entities.Job", b =>
                {
                    b.HasOne("Skillora.Models.Entities.Company", "Company")
                        .WithMany("Job")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Skillora.Models.ViewModels.CompanyViewModel", null)
                        .WithMany("Job")
                        .HasForeignKey("CompanyViewModelId");
                });

            modelBuilder.Entity("Skillora.Models.Entities.JobConstraint", b =>
                {
                    b.HasOne("Skillora.Models.Entities.Job", "Job")
                        .WithOne("JobConstraint")
                        .HasForeignKey("Skillora.Models.Entities.JobConstraint", "JobId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Skillora.Models.Entities.ShortListedStudentJob", b =>
                {
                    b.HasOne("Skillora.Models.Entities.Job", "Job")
                        .WithMany("shortListedStudentJobs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skillora.Models.Entities.Student", "Student")
                        .WithMany("shortListedStudentJobs")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Skillora.Models.Entities.SkillJob", b =>
                {
                    b.HasOne("Skillora.Models.Entities.Job", "Job")
                        .WithMany("SkillJobs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skillora.Models.Entities.Skill", "Skill")
                        .WithMany("SkillJobs")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Skillora.Models.Entities.SkillStudent", b =>
                {
                    b.HasOne("Skillora.Models.Entities.Skill", "Skill")
                        .WithMany("SkillStudents")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skillora.Models.Entities.Student", "Student")
                        .WithMany("SkillStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Skillora.Models.Entities.StudentJob", b =>
                {
                    b.HasOne("Skillora.Models.Entities.Job", "Job")
                        .WithMany("StudentJobs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skillora.Models.Entities.Student", "Student")
                        .WithMany("StudentJobs")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
